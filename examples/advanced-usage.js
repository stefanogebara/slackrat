require('dotenv').config();
const SlackSearchAgent = require('../src/utils');
const AdvancedSlackAgent = require('../src/advanced');

/**
 * Exemplos de uso avan√ßado do Slack Search Agent
 */

async function examples() {
    console.log('üöÄ EXEMPLOS DE USO AVAN√áADO DO SLACK SEARCH AGENT\n');
    
    // Inicializar o agente b√°sico
    const basicAgent = new SlackSearchAgent(process.env.SLACK_BOT_TOKEN);
    
    // Inicializar o agente avan√ßado (se configurado)
    let advancedAgent = null;
    if (process.env.SLACK_SIGNING_SECRET) {
        advancedAgent = new AdvancedSlackAgent(
            process.env.SLACK_BOT_TOKEN,
            process.env.SLACK_SIGNING_SECRET
        );
    }
    
    // ==========================================
    // EXEMPLO 1: Busca em m√∫ltiplos canais
    // ==========================================
    
    console.log('üì∫ EXEMPLO 1: Busca em m√∫ltiplos canais');
    console.log('=' .repeat(50));
    
    try {
        // Primeiro, vamos listar os canais dispon√≠veis
        const channels = await basicAgent.getAvailableChannels();
        console.log(`üìã Canais dispon√≠veis: ${channels.length}`);
        
        if (channels.length > 0) {
            // Pegar os primeiros 3 canais para teste
            const testChannels = channels.slice(0, 3).map(c => c.id);
            console.log(`üîç Testando busca em: ${testChannels.join(', ')}`);
            
            const multiResults = await basicAgent.searchMultipleChannels(
                testChannels,
                'deploy',
                { limit: 100 }
            );
            
            console.log(`‚úÖ Busca conclu√≠da em ${multiResults.successfulChannels} canais`);
            console.log(`üìä Total de resultados: ${multiResults.totalMatches}`);
            
            // Mostrar resultados por canal
            multiResults.channelResults.forEach(result => {
                if (result.success) {
                    console.log(`   üì∫ ${result.channel}: ${result.matchesFound} resultados`);
                } else {
                    console.log(`   ‚ùå ${result.channel}: ${result.error}`);
                }
            });
        }
    } catch (error) {
        console.error('‚ùå Erro no exemplo 1:', error.message);
    }
    
    console.log('\n');
    
    // ==========================================
    // EXEMPLO 2: Busca por m√∫ltiplas palavras-chave
    // ==========================================
    
    console.log('üîç EXEMPLO 2: Busca por m√∫ltiplas palavras-chave');
    console.log('=' .repeat(50));
    
    try {
        const channelId = process.env.DEFAULT_CHANNEL || 'C1234567890';
        const keywords = ['deploy', 'bug', 'reuni√£o', 'teste'];
        
        console.log(`üìù Buscando por: ${keywords.join(', ')}`);
        
        const multiKeywordResults = await basicAgent.searchMultipleKeywords(
            channelId,
            keywords,
            { limit: 50 }
        );
        
        Object.entries(multiKeywordResults).forEach(([keyword, result]) => {
            if (result.success) {
                console.log(`   ‚úÖ "${keyword}": ${result.matchesFound} resultados`);
            } else {
                console.log(`   ‚ùå "${keyword}": ${result.error}`);
            }
        });
    } catch (error) {
        console.error('‚ùå Erro no exemplo 2:', error.message);
    }
    
    console.log('\n');
    
    // ==========================================
    // EXEMPLO 3: Busca por per√≠odo espec√≠fico
    // ==========================================
    
    console.log('üìÖ EXEMPLO 3: Busca por per√≠odo espec√≠fico');
    console.log('=' .repeat(50));
    
    try {
        const channelId = process.env.DEFAULT_CHANNEL || 'C1234567890';
        
        // Buscar mensagens dos √∫ltimos 7 dias
        const endDate = new Date();
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - 7);
        
        console.log(`üìÖ Per√≠odo: ${startDate.toLocaleDateString()} a ${endDate.toLocaleDateString()}`);
        
        const timeResults = await basicAgent.searchInTimeRange(
            channelId,
            'deploy',
            startDate,
            endDate,
            { limit: 200 }
        );
        
        if (timeResults.success) {
            console.log(`‚úÖ ${timeResults.matchesFound} resultados encontrados`);
            console.log(`üìä Total de mensagens no per√≠odo: ${timeResults.totalMessages}`);
        } else {
            console.log(`‚ùå Erro: ${timeResults.error}`);
        }
    } catch (error) {
        console.error('‚ùå Erro no exemplo 3:', error.message);
    }
    
    console.log('\n');
    
    // ==========================================
    // EXEMPLO 4: Busca por padr√µes regex
    // ==========================================
    
    console.log('üîç EXEMPLO 4: Busca por padr√µes regex');
    console.log('=' .repeat(50));
    
    try {
        const channelId = process.env.DEFAULT_CHANNEL || 'C1234567890';
        
        // Buscar mensagens que contenham "deploy" seguido de "prod" ou "staging"
        const pattern = 'deploy.*(prod|staging)';
        
        console.log(`üîç Padr√£o regex: ${pattern}`);
        
        const regexResults = await basicAgent.searchByPattern(
            channelId,
            pattern,
            { caseSensitive: false, limit: 100 }
        );
        
        if (regexResults.success) {
            console.log(`‚úÖ ${regexResults.matchesFound} resultados encontrados`);
            
            // Mostrar algumas mensagens que correspondem ao padr√£o
            regexResults.results.slice(0, 3).forEach((msg, i) => {
                console.log(`   ${i + 1}. "${msg.text.substring(0, 80)}..."`);
            });
        } else {
            console.log(`‚ùå Erro: ${regexResults.error}`);
        }
    } catch (error) {
        console.error('‚ùå Erro no exemplo 4:', error.message);
    }
    
    console.log('\n');
    
    // ==========================================
    // EXEMPLO 5: An√°lise de sentimento
    // ==========================================
    
    console.log('üòä EXEMPLO 5: An√°lise de sentimento');
    console.log('=' .repeat(50));
    
    try {
        const testMessages = [
            'Deploy foi um sucesso! Tudo funcionando perfeitamente.',
            'Temos um problema cr√≠tico no sistema de produ√ß√£o.',
            'Reuni√£o foi produtiva, conseguimos resolver v√°rios bugs.',
            'Falha no deploy, precisamos reverter imediatamente.',
            'Teste passou com sucesso, podemos fazer o merge.'
        ];
        
        testMessages.forEach((message, i) => {
            const sentiment = basicAgent.analyzeSentiment(message);
            const emoji = sentiment.sentiment === 'positive' ? 'üòä' : 
                         sentiment.sentiment === 'negative' ? 'üòû' : 'üòê';
            
            console.log(`${i + 1}. ${emoji} "${message}"`);
            console.log(`   Sentimento: ${sentiment.sentiment} (score: ${sentiment.score})`);
            console.log(`   Confian√ßa: ${(sentiment.confidence * 100).toFixed(1)}%`);
            console.log('');
        });
    } catch (error) {
        console.error('‚ùå Erro no exemplo 5:', error.message);
    }
    
    console.log('\n');
    
    // ==========================================
    // EXEMPLO 6: An√°lise de frequ√™ncia de palavras
    // ==========================================
    
    console.log('üìä EXEMPLO 6: An√°lise de frequ√™ncia de palavras');
    console.log('=' .repeat(50));
    
    try {
        const channelId = process.env.DEFAULT_CHANNEL || 'C1234567890';
        
        // Buscar algumas mensagens para an√°lise
        const results = await basicAgent.searchChannel(channelId, '', { limit: 50 });
        
        if (results.success && results.results.length > 0) {
            // Combinar todas as mensagens
            const allText = results.results
                .map(r => r.message.text || '')
                .join(' ');
            
            // Analisar frequ√™ncia de palavras
            const wordFreq = basicAgent.analyzeWordFrequency(allText, ['deploy', 'bug', 'teste']);
            
            console.log('üìù Palavras mais frequentes:');
            wordFreq.slice(0, 10).forEach((item, i) => {
                console.log(`   ${i + 1}. "${item.word}": ${item.count} vezes`);
            });
        }
    } catch (error) {
        console.error('‚ùå Erro no exemplo 6:', error.message);
    }
    
    console.log('\n');
    
    // ==========================================
    // EXEMPLO 7: Usu√°rios mais ativos
    // ==========================================
    
    console.log('üë• EXEMPLO 7: Usu√°rios mais ativos');
    console.log('=' .repeat(50));
    
    try {
        const channelId = process.env.DEFAULT_CHANNEL || 'C1234567890';
        
        console.log('üîç Analisando usu√°rios ativos nos √∫ltimos 30 dias...');
        
        const activeUsers = await basicAgent.getActiveUsers(channelId, 30);
        
        if (activeUsers.length > 0) {
            console.log(`üë• ${activeUsers.length} usu√°rios ativos encontrados:`);
            
            activeUsers.slice(0, 10).forEach((user, i) => {
                const botIcon = user.isBot ? 'ü§ñ' : 'üë§';
                console.log(`   ${i + 1}. ${botIcon} ${user.name}: ${user.messageCount} mensagens`);
            });
        } else {
            console.log('‚ùå Nenhum usu√°rio ativo encontrado');
        }
    } catch (error) {
        console.error('‚ùå Erro no exemplo 7:', error.message);
    }
    
    console.log('\n');
    
    // ==========================================
    // EXEMPLO 8: Exporta√ß√£o de dados
    // ==========================================
    
    console.log('üì§ EXEMPLO 8: Exporta√ß√£o de dados');
    console.log('=' .repeat(50));
    
    try {
        const channelId = process.env.DEFAULT_CHANNEL || 'C1234567890';
        
        // Buscar resultados para exporta√ß√£o
        const results = await basicAgent.searchChannel(channelId, 'deploy', { limit: 20 });
        
        if (results.success && results.results.length > 0) {
            // Exportar para CSV
            const csv = basicAgent.exportToCSV(results);
            console.log(`üìä CSV gerado com ${results.results.length} linhas`);
            console.log('üìù Primeiras linhas:');
            console.log(csv.split('\n').slice(0, 3).join('\n'));
            
            // Exportar para JSON
            const json = basicAgent.exportToJSON(results);
            console.log(`\nüìÑ JSON gerado com ${json.length} caracteres`);
            
            // Salvar arquivos (opcional)
            const fs = require('fs');
            fs.writeFileSync('export-results.csv', csv);
            fs.writeFileSync('export-results.json', json);
            console.log('üíæ Arquivos salvos: export-results.csv e export-results.json');
        }
    } catch (error) {
        console.error('‚ùå Erro no exemplo 8:', error.message);
    }
    
    console.log('\n');
    
    // ==========================================
    // EXEMPLO 9: Agente avan√ßado (se configurado)
    // ==========================================
    
    if (advancedAgent) {
        console.log('üöÄ EXEMPLO 9: Agente avan√ßado');
        console.log('=' .repeat(50));
        
        console.log('‚úÖ Agente avan√ßado configurado!');
        console.log('üîå Slash Commands dispon√≠veis: /search, /searchhelp');
        console.log('üåê Webhooks configurados para eventos e comandos');
        console.log('üì± Funcionalidades de men√ß√£o e intera√ß√£o ativas');
        
        // Aqui voc√™ pode testar funcionalidades espec√≠ficas do agente avan√ßado
        // como slash commands, webhooks, etc.
    } else {
        console.log('‚ö†Ô∏è  EXEMPLO 9: Agente avan√ßado');
        console.log('=' .repeat(50));
        console.log('‚ùå Agente avan√ßado n√£o configurado');
        console.log('üí° Configure SLACK_SIGNING_SECRET no .env para ativar');
        console.log('üìñ Veja SLACK_SETUP.md para instru√ß√µes completas');
    }
    
    console.log('\n' + '=' .repeat(50));
    console.log('üéâ EXEMPLOS CONCLU√çDOS!');
    console.log('\nüí° Dicas para uso em produ√ß√£o:');
    console.log('   ‚Ä¢ Implemente rate limiting para evitar sobrecarga');
    console.log('   ‚Ä¢ Use cache Redis para melhor performance');
    console.log('   ‚Ä¢ Configure logs estruturados');
    console.log('   ‚Ä¢ Monitore uso da API do Slack');
    console.log('   ‚Ä¢ Implemente tratamento de erros robusto');
}

// Executar exemplos
examples().catch(console.error);

